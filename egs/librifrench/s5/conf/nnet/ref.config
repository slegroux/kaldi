# This file was created by the command:
# steps/nnet3/xconfig_to_configs.py --xconfig-file conf/nnet/network.xconfig --config-dir conf/nnet/
# It contains the entire neural network, but with those
# components that would normally require fixed vectors/matrices
# read from disk, replaced with random initialization
# (this applies to the LDA-like transform and the
# presoftmax-prior-scale, if applicable).  This file
# is used only to work out the left-context and right-context
# of the network.

input-node name=input dim=13
component name=tdnn1.affine type=NaturalGradientAffineComponent input-dim=65 output-dim=8  max-change=0.75
component-node name=tdnn1.affine component=tdnn1.affine input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2))
component name=tdnn1.relu type=RectifiedLinearComponent dim=8 self-repair-scale=1e-05
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine
component name=tdnn1.renorm type=NormalizeComponent dim=8 target-rms=1.0 add-log-stddev=false
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu
component name=tdnn2.affine type=NaturalGradientAffineComponent input-dim=8 output-dim=8  max-change=0.75
component-node name=tdnn2.affine component=tdnn2.affine input=tdnn1.renorm
component name=tdnn2.relu type=RectifiedLinearComponent dim=8 self-repair-scale=1e-05
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine
component name=tdnn2.renorm type=NormalizeComponent dim=8 target-rms=1.0 add-log-stddev=false
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu
component name=tdnn3.affine type=NaturalGradientAffineComponent input-dim=16 output-dim=8  max-change=0.75
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -1), Offset(tdnn2.renorm, 2))
component name=tdnn3.relu type=RectifiedLinearComponent dim=8 self-repair-scale=1e-05
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine
component name=tdnn3.renorm type=NormalizeComponent dim=8 target-rms=1.0 add-log-stddev=false
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu
component name=tdnn4.affine type=NaturalGradientAffineComponent input-dim=16 output-dim=8  max-change=0.75
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -3), Offset(tdnn3.renorm, 3))
component name=tdnn4.relu type=RectifiedLinearComponent dim=8 self-repair-scale=1e-05
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine
component name=tdnn4.renorm type=NormalizeComponent dim=8 target-rms=1.0 add-log-stddev=false
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu
component name=tdnn5.affine type=NaturalGradientAffineComponent input-dim=16 output-dim=8  max-change=0.75
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -3), Offset(tdnn4.renorm, 3))
component name=tdnn5.relu type=RectifiedLinearComponent dim=8 self-repair-scale=1e-05
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine
component name=tdnn5.renorm type=NormalizeComponent dim=8 target-rms=1.0 add-log-stddev=false
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu
component name=tdnn6.affine type=NaturalGradientAffineComponent input-dim=16 output-dim=8  max-change=0.75
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.renorm, -3), Offset(tdnn5.renorm, 3))
component name=tdnn6.relu type=RectifiedLinearComponent dim=8 self-repair-scale=1e-05
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine
component name=tdnn6.renorm type=NormalizeComponent dim=8 target-rms=1.0 add-log-stddev=false
component-node name=tdnn6.renorm component=tdnn6.renorm input=tdnn6.relu
component name=tdnn7.affine type=NaturalGradientAffineComponent input-dim=16 output-dim=8  max-change=0.75
component-node name=tdnn7.affine component=tdnn7.affine input=Append(Offset(tdnn6.renorm, -3), Offset(tdnn6.renorm, 3))
component name=tdnn7.relu type=RectifiedLinearComponent dim=8 self-repair-scale=1e-05
component-node name=tdnn7.relu component=tdnn7.relu input=tdnn7.affine
component name=tdnn7.renorm type=NormalizeComponent dim=8 target-rms=1.0 add-log-stddev=false
component-node name=tdnn7.renorm component=tdnn7.renorm input=tdnn7.relu
component name=tdnn8.affine type=NaturalGradientAffineComponent input-dim=16 output-dim=8  max-change=0.75
component-node name=tdnn8.affine component=tdnn8.affine input=Append(Offset(tdnn7.renorm, -3), Offset(tdnn7.renorm, 3))
component name=tdnn8.relu type=RectifiedLinearComponent dim=8 self-repair-scale=1e-05
component-node name=tdnn8.relu component=tdnn8.relu input=tdnn8.affine
component name=tdnn8.renorm type=NormalizeComponent dim=8 target-rms=1.0 add-log-stddev=false
component-node name=tdnn8.renorm component=tdnn8.renorm input=tdnn8.relu
component name=tdnn9.affine type=NaturalGradientAffineComponent input-dim=16 output-dim=8  max-change=0.75
component-node name=tdnn9.affine component=tdnn9.affine input=Append(Offset(tdnn8.renorm, -3), Offset(tdnn8.renorm, 3))
component name=tdnn9.relu type=RectifiedLinearComponent dim=8 self-repair-scale=1e-05
component-node name=tdnn9.relu component=tdnn9.relu input=tdnn9.affine
component name=tdnn9.renorm type=NormalizeComponent dim=8 target-rms=1.0 add-log-stddev=false
component-node name=tdnn9.renorm component=tdnn9.renorm input=tdnn9.relu
component name=tdnn10.affine type=NaturalGradientAffineComponent input-dim=16 output-dim=8  max-change=0.75
component-node name=tdnn10.affine component=tdnn10.affine input=Append(Offset(tdnn9.renorm, -3), Offset(tdnn9.renorm, 3))
component name=tdnn10.relu type=RectifiedLinearComponent dim=8 self-repair-scale=1e-05
component-node name=tdnn10.relu component=tdnn10.relu input=tdnn10.affine
component name=tdnn10.renorm type=NormalizeComponent dim=8 target-rms=1.0 add-log-stddev=false
component-node name=tdnn10.renorm component=tdnn10.renorm input=tdnn10.relu
component name=tdnn11.affine type=NaturalGradientAffineComponent input-dim=16 output-dim=8  max-change=0.75
component-node name=tdnn11.affine component=tdnn11.affine input=Append(Offset(tdnn10.renorm, -3), Offset(tdnn10.renorm, 3))
component name=tdnn11.relu type=RectifiedLinearComponent dim=8 self-repair-scale=1e-05
component-node name=tdnn11.relu component=tdnn11.relu input=tdnn11.affine
component name=tdnn11.renorm type=NormalizeComponent dim=8 target-rms=1.0 add-log-stddev=false
component-node name=tdnn11.renorm component=tdnn11.renorm input=tdnn11.relu
component name=tdnnFINAL.affine type=NaturalGradientAffineComponent input-dim=16 output-dim=8  max-change=0.75
component-node name=tdnnFINAL.affine component=tdnnFINAL.affine input=Append(Offset(tdnn11.renorm, -3), Offset(tdnn11.renorm, 3))
component name=tdnnFINAL.relu type=RectifiedLinearComponent dim=8 self-repair-scale=1e-05
component-node name=tdnnFINAL.relu component=tdnnFINAL.relu input=tdnnFINAL.affine
component name=tdnnFINAL.renorm type=NormalizeComponent dim=8 target-rms=1.0 add-log-stddev=false
component-node name=tdnnFINAL.renorm component=tdnnFINAL.renorm input=tdnnFINAL.relu
component name=prefinal-affine-layer.affine type=NaturalGradientAffineComponent input-dim=8 output-dim=8  max-change=0.75
component-node name=prefinal-affine-layer.affine component=prefinal-affine-layer.affine input=tdnnFINAL.renorm
component name=prefinal-affine-layer.relu type=RectifiedLinearComponent dim=8 self-repair-scale=1e-05
component-node name=prefinal-affine-layer.relu component=prefinal-affine-layer.relu input=prefinal-affine-layer.affine
component name=prefinal-affine-layer.renorm type=NormalizeComponent dim=8 target-rms=1.0 add-log-stddev=false
component-node name=prefinal-affine-layer.renorm component=prefinal-affine-layer.renorm input=prefinal-affine-layer.relu
component name=output.affine type=NaturalGradientAffineComponent input-dim=8 output-dim=3056  max-change=1.5 param-stddev=0.0 bias-stddev=0.0
component-node name=output.affine component=output.affine input=prefinal-affine-layer.renorm
component name=output.log-softmax type=LogSoftmaxComponent dim=3056
component-node name=output.log-softmax component=output.log-softmax input=output.affine
output-node name=output input=output.log-softmax objective=linear
